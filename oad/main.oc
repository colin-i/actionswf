
format elfobj64

importx "strlen" strlen
importx "malloc" malloc
importx "free" free
importx "memcpy" memcpy
importx "rename" rename

override include_sec 1
include "common.h" "common.h.oh"

import "fcontent" fcontent
import "loop" loop

functionx oadata_make(ss swf_fullpath)
	sd size;set size strlen(swf_fullpath)
	char logext=".log";vstr slogext^logext
	sd allsize=\.logext;add allsize size
	sd mem;set mem malloc(allsize)
	if mem!=(NULL)
		sd exit
		call memcpy(mem,swf_fullpath,size)
		add size mem
		call memcpy(size,slogext,\.logext)
		sd logsize
		sd logcontent;set logcontent fcontent(mem,#logsize)
		if logcontent!=(NULL)
			char xext=".x";vstr sxext^xext
			call memcpy(size,sxext,\.xext)
			sd dummy
			sd xcontent;set xcontent fcontent(mem,#dummy)
			if xcontent!=(NULL)
				char xxext=".xx";vstr sxxext^xxext
				call memcpy(size,sxxext,\.xxext)
				sd xxcontent;set xxcontent fcontent(mem,#dummy)
				if xxcontent!=(NULL)
					set exit loop(logcontent,xcontent,xxcontent,logsize)
					call free(xxcontent)
				else
					set exit (EXIT_FAILURE)
				end
				call free(xcontent)
			else
				set exit (EXIT_FAILURE)
			end
			call free(logcontent)
		else
			set exit (EXIT_FAILURE)
		end
		call free(mem)
		return exit
	end
	return (EXIT_FAILURE)
end

functionx oadata_ok(ss swf_fullpath)
# move ...last.data ...data
	sd size;set size strlen(swf_fullpath)
	char lastinter=".last.data";vstr slastinter^lastinter
	sd allsize1=\.lastinter;add allsize1 size
	sd from;set from malloc(allsize1)
	if from!=(NULL)
		char inter=".data";vstr sinter^inter
		sd allsize2=\.inter;add allsize2 size
		sd to;set to malloc(allsize2)
		if to!=(NULL)
			call memcpy(from,swf_fullpath,size)
			call memcpy(to,swf_fullpath,size)
			add size from
			call memcpy(size,slastinter,\.lastinter)
			sub size from
			add size to
			call memcpy(size,sinter,\.inter)

			sd r ;#same 0/-1
			set r rename(from,to)

			call free(from)
			call free(to)
			return r
		end
		call free(from)
	end
	return (EXIT_FAILURE)
end
