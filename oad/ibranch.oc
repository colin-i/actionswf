
format elfobj64

override include_sec 1
include "common.h" "common.h.oh"

import "re_alloc" re_alloc
import "branch_init" branch_init

function ibranch_add(valueu pf)
	valueu bra#1;set bra pf#:preframe.branchpointer
	charx ok#1
	set ok re_alloc(#bra#:branch.innerbranches,bra#:branch.isize)
	if ok=(EXIT_SUCCESS)
		svu pointer#1;set pointer bra#:branch.innerbranches
		add pointer bra#:branch.isize
		set pointer# branch_init(pf,bra) #no suprabranch, same as root
		if pointer#!=(NULL)
			add bra#:branch.isize :
			return (EXIT_SUCCESS)
		end
	end
	return (EXIT_FAILURE)
end
function ibranch_done(valueu pf)
	valueu bra#1;set bra pf#:preframe.branchpointer
	set pf#:preframe.branchpointer bra#:branch.topbranch
end

import "re_alloc_add" re_alloc_add

function jumpforwardif_resolve(valueu pf,wordxu number)
	dataxu offset#1;set offset pf#:preframe.size
	sub offset number
	valueu prev#1;set prev pf#:preframe.branchpointer
	whiletrue
		charx ok#1
		if prev#:branch.offset=offset  ##is /,,+offset/
			set ok re_alloc_add(#pf:preframe.actions_if,#pf:preframe.actions_if_size,prev#:branch.action_if)
			return ok
		end
		#for forin break ends
		if prev#:branch.offset_break=offset
			set ok re_alloc_add(#pf:preframe.actions_if,#pf:preframe.actions_if_size,prev#:branch.action_break)
			return ok
		end
		set prev prev#:branch.suprabranch
	end
end
import "printe" printe
function jumpforward_resolve(valueu pf,wordxu number)
	dataxu offset#1;set offset pf#:preframe.size
	sub offset number
	valueu prev#1;set prev pf#:preframe.branchpointer
	whiletrue
		charx ok#1
		#for conditions end, this will resolve also break ends
		if prev#:branch.offset=offset  ##is /,,&offset/
			set ok re_alloc_add(#pf:preframe.actions_jump,#pf:preframe.actions_jump_size,prev#:branch.action_if)
			return ok
		end
		#this is catching unreachable code after break end
		if prev#:branch.offset_break=offset ##both on first? like If? whiletrue break var a} but this is not logical
			call printe("unreachable code after break")
			return (EXIT_FAILURE)
		end
		set prev prev#:branch.suprabranch
	end
end
function jumpbackward_resolved(valueu dest,valueu src,charx log,valueu br)
	set dest#:action.next src
	if log=(TRUE)
		inc br#:branch.log_backjumps
	end
end
function jumpbackward_resolve(valueu pf,wordxu number,charx log)
	dataxu offset#1;set offset pf#:preframe.size
	sub offset number
	valueu prev#1;set prev pf#:preframe.branchpointer
	whiletrue
		if prev#:branch.offset_loop=offset ##can be ,,|,,$
			#link prev action to loop start action
			call jumpbackward_resolved(pf#:preframe.action_last,prev#:branch.action_loop,log,prev)
			break
		end
		set prev prev#:branch.suprabranch
	end
end
