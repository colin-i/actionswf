
format elfobj64

override include_sec 1
include "common.h" "common.h.oh"

#multithread unsafe
charx error#1
#

function tree_init()
	set global.error (EXIT_SUCCESS)
end
function tree_exit()
	return global.error
end

function tree_frame_init(valueu pf)
	set pf#:preframe.log_mem (NULL)
	set pf#:preframe.log_size 0
	set pf#:preframe.log_allsize 0
end
importx "free" free
import "prints" prints
function tree_frame_free(valueu pf)
	if pf#:preframe.log_mem!=(NULL)
		dataxu sz#1;set sz pf#:preframe.log_size
		call tree_entry_ex(pf,0)  #must null end the string first
		if sz!=pf#:preframe.log_size
			call prints(pf#:preframe.log_mem)
		end
		call free(pf#:preframe.log_mem)
	end
end
const tree_pad=pad_default
const tree_pad_=(tree_pad-1)
const _tree_pad_=~tree_pad_
importx "realloc" realloc
function tree_resize(valueu pf,valueu sz)
	add sz pf#:preframe.log_size
	if sz>^pf#:preframe.log_allsize
		add sz (tree_pad)
		and sz (_tree_pad_)
		valueu m#1;set m realloc(pf#:preframe.log_mem,sz)
		if m=(NULL)
			set global.error (EXIT_FAILURE)
			return (EXIT_FAILURE)
		end
		set pf#:preframe.log_allsize sz
		set pf#:preframe.log_mem m
	end
	return (EXIT_SUCCESS)
end

function tree_entry_ex(valueu pf,charx type)
	charx ok#1;set ok tree_resize(pf,1)
	if ok=(EXIT_SUCCESS)
		ss p;set p pf#:preframe.log_mem
		add p pf#:preframe.log_size
		set p# type
		inc pf#:preframe.log_size
	end
end
function tree_entry(valueu pf,charx type)
	if pf#:preframe.log_size!=0
		ss mem;set mem pf#:preframe.log_mem
		add mem pf#:preframe.log_size
		dec mem
		if mem#=(xlog_innerbranchend)
			#\n and indent
		end
	end
	call tree_entry_ex(pf,type)
end

entryraw global()
